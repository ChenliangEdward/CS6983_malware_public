import requests
def list_pastes(api_dev_key, api_user_key, limit=2):
    url = 'https://pastebin.com/api/api_post.php'
    data = {
        'api_option': 'list',
        'api_user_key': api_user_key,
        'api_dev_key': api_dev_key,
        'api_results_limit': limit
    }

    response = requests.post(url, data=data)
    if response.status_code == 200:
        return response.text
    else:
        return "Failed to retrieve pastes. Status code: {}".format(response.status_code)

def store_text_to_list(text):
    paste_blocks = []
    prefix = "<paste>"
    suffix = "</paste>"
    start = 0
    
    while True:
        # Find the start index of the paste block
        start_index = text.find(prefix, start)
        if start_index == -1:
            break  # No more paste blocks, exit the loop
        
        # Find the end index of the paste block
        end_index = text.find(suffix, start_index) + len(suffix)
        if end_index == -1:
            break  # Malformed data without closing tag, exit the loop
        
        # Extract the paste block between the start of the prefix and the end of the suffix
        paste_block = text[start_index:end_index]
        paste_blocks.append(paste_block)
        
        # Move start index past this block for the next iteration
        start = end_index
    
    return paste_blocks

def extract_pastebin_urls(text):
    prefix = "https://pastebin.com/"
    suffix = "</paste_url>"
    urls = []
    start = 0
    while True:
        # Find the start index of the prefix
        start_index = text.find(prefix, start)
        if start_index == -1:
            break  # No more URLs, exit the loop
        # Find the end index of the suffix starting from the start index
        end_index = text.find(suffix, start_index)
        if end_index == -1:
            break  # Malformed data without closing tag, exit the loop
        # Extract the URL between the start of the prefix and the end of the suffix
        url = text[start_index:end_index]
        urls.append(url)
        # Move start index past this URL for the next iteration
        start = end_index + len(suffix)
    
    return urls

def extract_pastebin_ids(urls):
    ids = []
    base_url = "https://pastebin.com/"
    for url in urls:
        if url.startswith(base_url):
            # Extract the ID part of the URL by removing the base URL
            id = url[len(base_url):]
            ids.append(id)
    return ids

def extract_pastebin_titles(text):
    prefix = "<paste_title>"
    suffix = "</paste_title>"
    titles = []
    start = 0
    while True:
        # Find the start index of the prefix
        start_index = text.find(prefix, start)
        if start_index == -1:
            break  # No more titles, exit the loop
        # Adjust the start index to skip over the prefix
        start_index += len(prefix)
        
        # Find the end index of the suffix starting from the start index
        end_index = text.find(suffix, start_index)
        if end_index == -1:
            break  # Malformed data without closing tag, exit the loop
        
        # Extract the title between the start of the prefix and the end of the suffix
        title = text[start_index:end_index]
        titles.append(title)
        
        # Move start index past this title for the next iteration
        start = end_index + len(suffix)
    
    return titles

def get_content(api_dev_key, api_user_key, api_paste_key):
    url = "https://pastebin.com/api/api_raw.php"
    data = {
        'api_option': 'show_paste',
        'api_user_key': api_user_key,
        'api_dev_key': api_dev_key,
        'api_paste_key': api_paste_key
    }

    # Sending the POST request
    response = requests.post(url, data=data)

    # Check if the request was successful
    if response.status_code == 200:
        return response.text, 1
    else:
        return f"Failed to fetch paste: {response.text}", 0

def delete_paste(api_dev_key, api_user_key, api_paste_key):
    url = "https://pastebin.com/api/api_post.php"
    data = {
        'api_option': 'delete',
        'api_user_key': api_user_key,
        'api_dev_key': api_dev_key,
        'api_paste_key': api_paste_key
    }

    # Sending the POST request
    response = requests.post(url, data=data)

    # Return the response text, which could be an error or a success message
    return response.text

def create_paste(api_user_key, paste_code, paste_name):
    # API URL
    url = "https://pastebin.com/api/api_post.php"
    
    # Your API key here
    api_dev_key = 'jNz91HCPI_iMptdqNek5UhHcgRD0a1Oc'  # Replace this with your actual Pastebin Developer API key

    # Paste content and other parameters
    api_paste_code = URL + paste_code  # Text to be pasted
    api_paste_private = '2'  # Visibility: 0=public, 1=unlisted, 2=private
    api_paste_name = paste_name # Name or title of the paste
    api_paste_expire_date = '1M'  # Paste expiration date
    api_paste_format = 'python'  # Syntax highlighting: Use 'python' for Python syntax
    
    # Payload for POST request
    data = {
        'api_option': 'paste',
        'api_user_key': api_user_key,  # User key for a non-guest paste
        'api_paste_private': api_paste_private,
        'api_paste_name': api_paste_name,
        'api_paste_expire_date': api_paste_expire_date,
        'api_paste_format': api_paste_format,
        'api_dev_key': api_dev_key,
        'api_paste_code': api_paste_code
    }
    
    # Make the HTTP request
    response = requests.post(url, data=data)
    
    # Print the response URL or error message
    if response.status_code == 200:
        print("Paste created successfully: " + response.text)
    else:
        print("Failed to create paste. Status code:", response.status_code)

api_dev_key = 'jNz91HCPI_iMptdqNek5UhHcgRD0a1Oc'  # Your Pastebin Developer API Key
api_user_key = '59ba63baafef389206fe49ded1067882'
# Fetch pastes
text = list_pastes(api_dev_key, api_user_key)
print(text)
pastes_list = store_text_to_list(text)
print(pastes_list)

for paste in pastes_list:
    title = extract_pastebin_titles(text)
    print(title)

    paste_urls = extract_pastebin_urls(text)
    print(paste_urls)
    
    paste_key = extract_pastebin_ids(paste_urls)
    print(paste_key)
    
    content, err = get_content(api_dev_key, api_user_key, paste_key)
    
    # Send data to server
    print(content)
    
    # Delete Pastes
    delete_paste(api_dev_key, api_user_key, paste_key)