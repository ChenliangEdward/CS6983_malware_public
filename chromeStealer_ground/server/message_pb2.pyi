from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from typing import ClassVar as _ClassVar, Optional as _Optional

DESCRIPTOR: _descriptor.FileDescriptor

class Beacon_pulse(_message.Message):
    __slots__ = ("guid",)
    GUID_FIELD_NUMBER: _ClassVar[int]
    guid: str
    def __init__(self, guid: _Optional[str] = ...) -> None: ...

class Register(_message.Message):
    __slots__ = ("client_pk_bin",)
    CLIENT_PK_BIN_FIELD_NUMBER: _ClassVar[int]
    client_pk_bin: bytes
    def __init__(self, client_pk_bin: _Optional[bytes] = ...) -> None: ...

class Key_negotiation_implant(_message.Message):
    __slots__ = ("client_pk_bin", "client_guid")
    CLIENT_PK_BIN_FIELD_NUMBER: _ClassVar[int]
    CLIENT_GUID_FIELD_NUMBER: _ClassVar[int]
    client_pk_bin: bytes
    client_guid: str
    def __init__(self, client_pk_bin: _Optional[bytes] = ..., client_guid: _Optional[str] = ...) -> None: ...

class TaskRequest(_message.Message):
    __slots__ = ("guid", "Opcode", "Args")
    GUID_FIELD_NUMBER: _ClassVar[int]
    OPCODE_FIELD_NUMBER: _ClassVar[int]
    ARGS_FIELD_NUMBER: _ClassVar[int]
    guid: str
    Opcode: int
    Args: str
    def __init__(self, guid: _Optional[str] = ..., Opcode: _Optional[int] = ..., Args: _Optional[str] = ...) -> None: ...

class InfoGather(_message.Message):
    __slots__ = ("guid", "username", "windows", "productname", "CPU", "devicename", "mem")
    GUID_FIELD_NUMBER: _ClassVar[int]
    USERNAME_FIELD_NUMBER: _ClassVar[int]
    WINDOWS_FIELD_NUMBER: _ClassVar[int]
    PRODUCTNAME_FIELD_NUMBER: _ClassVar[int]
    CPU_FIELD_NUMBER: _ClassVar[int]
    DEVICENAME_FIELD_NUMBER: _ClassVar[int]
    MEM_FIELD_NUMBER: _ClassVar[int]
    guid: str
    username: str
    windows: str
    productname: str
    CPU: str
    devicename: str
    mem: str
    def __init__(self, guid: _Optional[str] = ..., username: _Optional[str] = ..., windows: _Optional[str] = ..., productname: _Optional[str] = ..., CPU: _Optional[str] = ..., devicename: _Optional[str] = ..., mem: _Optional[str] = ...) -> None: ...

class TaskResponse(_message.Message):
    __slots__ = ("guid", "Opcode", "response", "additional")
    GUID_FIELD_NUMBER: _ClassVar[int]
    OPCODE_FIELD_NUMBER: _ClassVar[int]
    RESPONSE_FIELD_NUMBER: _ClassVar[int]
    ADDITIONAL_FIELD_NUMBER: _ClassVar[int]
    guid: str
    Opcode: int
    response: str
    additional: str
    def __init__(self, guid: _Optional[str] = ..., Opcode: _Optional[int] = ..., response: _Optional[str] = ..., additional: _Optional[str] = ...) -> None: ...

class Message_encrypt(_message.Message):
    __slots__ = ("guid", "ciphertext")
    GUID_FIELD_NUMBER: _ClassVar[int]
    CIPHERTEXT_FIELD_NUMBER: _ClassVar[int]
    guid: str
    ciphertext: bytes
    def __init__(self, guid: _Optional[str] = ..., ciphertext: _Optional[bytes] = ...) -> None: ...

class Message_encrypt_large(_message.Message):
    __slots__ = ("guid_ephmeral", "ciphertext")
    GUID_EPHMERAL_FIELD_NUMBER: _ClassVar[int]
    CIPHERTEXT_FIELD_NUMBER: _ClassVar[int]
    guid_ephmeral: str
    ciphertext: bytes
    def __init__(self, guid_ephmeral: _Optional[str] = ..., ciphertext: _Optional[bytes] = ...) -> None: ...

class Shell_execution(_message.Message):
    __slots__ = ("guid", "command", "result")
    GUID_FIELD_NUMBER: _ClassVar[int]
    COMMAND_FIELD_NUMBER: _ClassVar[int]
    RESULT_FIELD_NUMBER: _ClassVar[int]
    guid: str
    command: str
    result: str
    def __init__(self, guid: _Optional[str] = ..., command: _Optional[str] = ..., result: _Optional[str] = ...) -> None: ...

class FileStream(_message.Message):
    __slots__ = ("guid", "order", "filename", "fileSize", "actualRead", "chunk")
    GUID_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    FILENAME_FIELD_NUMBER: _ClassVar[int]
    FILESIZE_FIELD_NUMBER: _ClassVar[int]
    ACTUALREAD_FIELD_NUMBER: _ClassVar[int]
    CHUNK_FIELD_NUMBER: _ClassVar[int]
    guid: str
    order: int
    filename: str
    fileSize: int
    actualRead: int
    chunk: bytes
    def __init__(self, guid: _Optional[str] = ..., order: _Optional[int] = ..., filename: _Optional[str] = ..., fileSize: _Optional[int] = ..., actualRead: _Optional[int] = ..., chunk: _Optional[bytes] = ...) -> None: ...

class File_Download_Response(_message.Message):
    __slots__ = ("order", "filename", "chunkSize", "fileSize", "chunk")
    ORDER_FIELD_NUMBER: _ClassVar[int]
    FILENAME_FIELD_NUMBER: _ClassVar[int]
    CHUNKSIZE_FIELD_NUMBER: _ClassVar[int]
    FILESIZE_FIELD_NUMBER: _ClassVar[int]
    CHUNK_FIELD_NUMBER: _ClassVar[int]
    order: int
    filename: str
    chunkSize: int
    fileSize: int
    chunk: bytes
    def __init__(self, order: _Optional[int] = ..., filename: _Optional[str] = ..., chunkSize: _Optional[int] = ..., fileSize: _Optional[int] = ..., chunk: _Optional[bytes] = ...) -> None: ...

class File_Download_Request(_message.Message):
    __slots__ = ("guid", "filename", "order")
    GUID_FIELD_NUMBER: _ClassVar[int]
    FILENAME_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    guid: str
    filename: str
    order: int
    def __init__(self, guid: _Optional[str] = ..., filename: _Optional[str] = ..., order: _Optional[int] = ...) -> None: ...

class Chrome_info(_message.Message):
    __slots__ = ("guid", "enc_key", "dbfile")
    GUID_FIELD_NUMBER: _ClassVar[int]
    ENC_KEY_FIELD_NUMBER: _ClassVar[int]
    DBFILE_FIELD_NUMBER: _ClassVar[int]
    guid: str
    enc_key: str
    dbfile: bytes
    def __init__(self, guid: _Optional[str] = ..., enc_key: _Optional[str] = ..., dbfile: _Optional[bytes] = ...) -> None: ...
